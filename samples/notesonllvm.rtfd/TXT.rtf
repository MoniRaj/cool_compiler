{\rtf1\ansi\ansicpg1252\cocoartf1038\cocoasubrtf360
{\fonttbl\f0\fnil\fcharset0 HelveticaNeue;\f1\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;\red255\green255\blue255;\red38\green38\blue38;}
\margl1440\margr1440\vieww9000\viewh8400\viewkind0
\deftab720
\pard\pardeftab720\sl520\ql\qnatural

\f0\fs40 \cf0 \cb2 Extra diagram - Object and Class structure
\fs26 \cf3 \
\pard\pardeftab720\sl340\ql\qnatural
\cf3 From email conversations, I think the way inherited and overridden methods and inherited fields are represented at run time may not be clear. Here is a diagram to help explain it. I used Java syntax instead of Cool syntax, but the concept is the same (and would be the same for most other languages with classes and single inheritance).\

\f1\fs24 \cf0 {{\NeXTGraphic InheritOveride.png \width15358 \height11758 \noorient
}¬}
\f0\fs26 \cf3 \
In class Pair, incx is an inherited method. It is in the vtable (part of the class structure) and points to the inherited method. getx is overridden. It is also in the vtable, but points to the overriding definition. incy and gety are newly introduced methods, and as you would expect their vtable entries point to the new method definitions. The instance variables x and y (fields, members, attributes, whatever you call them) live in the object, not the class, regardless of whether they are newly introduced (like y) or inherited (like x). \
\
Note that the code of the inherited method incx has to work on an Pair object and also on a Single object. Because the address of x is "first variable after the class pointer", in the same place in both the subclass and superclass, the same code works without change. So, it is important that the relative positions of inherited fields is consistent. Likewise, consider if we did something like \
\
s: Single = (Single) p;\
int z = s.getx( ); \
\
What do you think happens? s is still a Pair object, even though its static type is Single. When we call s.getx(), we look for the second method in its class record. It's important that getx is the second method in both Single and Pair, because it's the static type that tells us to look in the second slot but the dynamic type (which is still Pair) that points to the code we will actually execute. s.getx() calls the overriding method. \
\
(You can see why interfaces in Java, or multiple inheritance in C++, makes this more difficult. With single inheritance we just make sure the positions in the object and class records are consistent all the way down the hierarchy. With multiple inheritance or interfaces we can't just line them up --- we need extra tables in the run-time representation to indicate where things are.) \
\
(To be consistent, I should probably have drawn p as a pointer to the Pair object. In Cool, Java, and Python, a variable or field that "contains" an object is always a pointer to that object. That's not necessarily the case in all languages.)\
}