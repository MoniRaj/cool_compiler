# README
#
# Explains contents and details how to run [Not-As-]Cool Compiler
#
# Author: Paul Elliott and Monisha Balireddi
# Date: 6/11/13

--0. Notes--
Our version of the Cool Compiler, dubbed [Not-As-]Cool Compiler,
has been scaled down in some trivial ways.  For one,
case statements have been removed from the language.
Two, Symbols have been removed for now--this means that
the Symbol functionality of IO has also been removed.
Three, String functionality has been reduced--we decided
to represent Strings as a basic type i8* character pointer in LLVM,
and therefore we did not get a chance to create the specialty String functions.
Four, the toString functionality of the Any class has been removed.
Lastly, there is no ArrayAny class..sad day, but we just didn't get to it.

--1. Contents--
This directory should contain:
    a. main/
        1. test.sh - a shell script for compiling/running the compiler
        2. scanner.flex - a JFlex program containing the scanner definition
        3. Driver.java - a Driver program for testing the Cool parser/AST builder
        4. ErrorReport.java - an error reporting class
        5. cool.grammar - a Beaver grammar specification for a LALR(1) parser
        6. Terminals.java - a class containing the Terminal IDs
        7. CodeGenerator.java - the fancy shmancy code generation class
    b. beaver/
        1. Scanner.java - part of Beaver scanner api
        2. Symbol.java - part of Beaver scanner api
        3. Action.java - part of Beaver api
        4. Parser.java - part of Beaver api
        5. ParsingTables.java - part of Beaver api
        6. beaver-cc-0.9.11.jar - jar file used to execute Beaver on a grammar file
        7. beaver-cc.jar - (older) jar file used to " " " 
    c. ast/
        [This directory contains all of the Java class files necessary
         for building the AST--including abstract syntax classes. 
         I will not enumerate everything here in the interest of brevity.]
    d. stat/
        [This directory holds old copies of the .stat file, produced by Beaver.]
    e. typecheck/
        1. Environment.java - typecheck environment
        2. HashStack.java - data structure for type checking
        3. TreeWalker.java - modified AST Tree Walker now performs type checking
    f. README - this file

--2. To Run--
To run, cd to main/ and open test.sh and modify the JFLEX variable to be your 
local path to JFlex. If JFlex is at /usr/share/weird_place/jflex then:
    JFLEX='/usr/share/weird_place/jflex'

*Note* if you have installed the javac and java executables in strange locations,
you will probably also need to uncomment and modify those paths as well.

*Optional* I have included Beaver jar files for convenience, but you 
may modify BEAVERJAR in test.sh to use a different jar file.

Next, chmod +x test.sh and run via:
    ./test.sh <filename>
where <filename> is a path to a cool program. For example:
    ./test.sh cool_programs/basic.cool.cool
The script will compile the parser, followed by the scanner,
and then run everything and build the AST. The AST will be 
printed to the console (stdout) in the form of a JSON string.

Questions or comments, please email Paul Elliott at paule@cs.uoregon.edu.
